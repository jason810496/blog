[{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/zh-tw/tags/zh-tw/","section":"標籤","summary":"","title":"Zh-Tw","type":"tags"},{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/tags/blog/","section":"tags","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/tags/en/","section":"tags","summary":"","title":"En","type":"tags"},{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/tags/hugo/","section":"tags","summary":"","title":"Hugo","type":"tags"},{"content":" About Hugo # Hugo is my current static site generator.\nHugo is much faster than other static site generators like Jekyll, Hexo, etc. Supports partials and shortcodes for template functions. Supports functions for manipulating data in templates. Common Hugo shortcodes example:\n/layouts/shortcodes/myImage.html\n{{ $image := .Get \u0026#34;image\u0026#34; }} \u0026lt;img class=\u0026#34;w-100\u0026#34; src=\u0026#34;{{ $image }}\u0026#34; alt=\u0026#34;image\u0026#34;\u0026gt; And you can use it in your markdown file like this:\n{{\u0026lt; myImage image=\u0026#34;https://example.com/image.jpg\u0026#34; \u0026gt;}} Current Hugo Theme: Blowfish # I\u0026rsquo;m using the blowfish as my current Hugo theme! It provides the codeimporter shortcode for importing code snippets from a URL.\n{{\u0026lt; codeimporter url=\u0026#34;https://raw.githubusercontent.com/username/repo/branch/file.go\u0026#34; type=\u0026#34;go\u0026#34; \u0026gt;}} However, it doesn\u0026rsquo;t support getting files from a specific range.\nSolution for Getting a Slice from a Specific Range in Hugo # Since Hugo doesn\u0026rsquo;t support substr or cut functions for slicing a slice from a specific range, we can utilize the concept of using the head and tail GNU commands to grep start to end lines of files on Linux.\nFor Linux: Using head and tail to specify the range of lines to be displayed.\nhead -n 10 file.txt | tail -n 5 # display line 6 to 10 For Hugo: We can use the first and after functions in Hugo to get a slice from a specific range.\nThe first and after functions are in the collection functions category.\n{{ $lines := slice \u0026#34;line1\u0026#34; \u0026#34;line2\u0026#34; \u0026#34;line3\u0026#34; \u0026#34;line4\u0026#34; \u0026#34;line5\u0026#34; }} {{ $startLine := 2 }} {{ $endLine := 4 }} {{ $startLine := sub $startLine 1 }} {{ $selectedLines := first $endLine $lines }} {{ $selectedLines := after $startLine $selectedLines }} PR for Blowfish Theme: Add startLine and endLine Support for codeimporter # I\u0026rsquo;ve created a PR for the blowfish theme to add startLine and endLine support for the codeimporter shortcode.\nPR: https://github.com/nunocoracao/blowfish/pull/1558\nReference # Blowfish theme: https://blowfish.page/ https://gohugo.io/functions/collections/ https://gohugo.io/templates/shortcode-templates/ https://gohugo.io/templates/partials/ https://gohugo.io/functions/ https://gohugo.io/functions/collections/first/ https://gohugo.io/functions/collections/after/ ","date":"2024-06-22","externalUrl":null,"permalink":"/note/hugo-functions-get-slice-from-specific-range/","section":"Note","summary":"How to get a slice from a specific range in Hugo?","title":"Hugo Functions: Get Slice From Specific Range","type":"note"},{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/tags/","section":"tags","summary":"","title":"tags","type":"tags"},{"content":"","date":"2024-06-16","externalUrl":null,"permalink":"/tags/backend/","section":"tags","summary":"","title":"Backend","type":"tags"},{"content":" How to use Transaction in SqlAlchemy # Transaction is an essential part of database operations, and it ensures the consistency of the database. SqlAlchemy is the most common ORM framework in Python. So how to use Transaction in SqlAlchemy?\nFeatures of Transaction # In Transaction\nAll operations are either all successful or all failed That is, the operations in the Transaction are Atomic Transaction usually includes the following steps\nStart Transaction Perform operations Multiple operations may be performed in this transaction, such as: Add one more object instance and modify another object instance \u0026hellip; End Transaction If the operation is successful, Commit Transaction If the operation fails, Rollback Transaction Use Transaction in SqlAlchemy # In SqlAlchemy, Transaction is implemented through Session. Here is a simple Transaction example\nfrom sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, Session # Create engine engine = create_engine(\u0026#34;sqlite:///example.db\u0026#34;) # Create session SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) def get_db(): \u0026#34;\u0026#34;\u0026#34; Get SQLAlchemy database session \u0026#34;\u0026#34;\u0026#34; database:Session = SessionLocal() try: yield database finally: database.close() # service layer def create_user(db: Session, user): \u0026#34;\u0026#34;\u0026#34; Create user \u0026#34;\u0026#34;\u0026#34; # other business logic # user.name = user.name.capitalize() # user.age = user.age + 1 try: db.add(user) db.commit() return user except Exception as e: db.rollback() raise e # controller layer def create_user_controller(user): \u0026#34;\u0026#34;\u0026#34; Create user controller \u0026#34;\u0026#34;\u0026#34; db = next(get_db()) return create_user(db, user) The sessionmaker creates a module-level factory for Session. In get_db, a Session instance is obtained using SessionLocal(), and the Session is closed in the finally block.\nIn the controller layer, it is only responsible for injecting the Session instance into the service layer\u0026rsquo;s create_user.\nIn this way, all operations in the service layer are already within a Transaction. If any operation in create_user fails, the entire Transaction will Rollback, and no changes will be made to the database.\nUsing SqlAlchemy Transactions in FastAPI # Using SqlAlchemy Transactions in FastAPI is also very simple. FastAPI provides Depends to implement Dependency Injection. You can use a Generator Function as a parameter for Depends and obtain the Session instance yielded in get_db within Depends.\nUnlike the example above, there is no need to use next to get the Session instance.\nfrom typing import List from fastapi import Depends, HTTPException from sqlalchemy.orm import Session ... def get_db(): \u0026#34;\u0026#34;\u0026#34; Get SQLAlchemy database session \u0026#34;\u0026#34;\u0026#34; database = SessionLocal() try: yield database finally: database.close() @router.post(\u0026#34;/users\u0026#34;, response_model=List[schemas.User]) def create_users(user_1: schemas.UserCreate, user_2: schemas.UserCreate, db: Session = Depends(get_db)): \u0026#34;\u0026#34;\u0026#34; Create two users \u0026#34;\u0026#34;\u0026#34; try: user_1 = service.create_user(db=db, user=user_1) user_2 = service.create_user(db=db, user=user_2) db.commit() return [user_1, user_2] except: db.rollback() raise HTTPException(status_code=500, detail=\u0026#34;SqlAlchemy Transaction Error\u0026#34;) Reference # https://stackoverflow.com/questions/65699977/fastapi-sqlalchemy-how-to-manage-transaction-session-and-multiple-commits https://docs.sqlalchemy.org/en/20/orm/session_basics.html#using-a-sessionmaker ","date":"2024-06-16","externalUrl":null,"permalink":"/note/sqlalchemy-transaction/","section":"Note","summary":"How to transaction in SqlAlchemy","title":"How to use Transaction in SqlAlchemy","type":"note"},{"content":"","date":"2024-06-16","externalUrl":null,"permalink":"/tags/python/","section":"tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"2024-06-16","externalUrl":null,"permalink":"/tags/sqlalchemy/","section":"tags","summary":"","title":"SqlAlchemy","type":"tags"},{"content":" Python: read file(BinaryIO) multiple time # Recently, I need to read BinaryIO object multiple time when handling Minio file.\nsolution : seek(0) # The reason is that the cursor of BinaryIO object will stay at the end of the file after reading it. So, we need to reset the cursor by seek(0).\nf = open(f) content = f.read() f.seek(0) # reset !!!! content = f.read() Read UploadFile object multiple time in FastAPI # Because UploadFile object in FastAPI also encapsulates BinaryIO object. We can also reset the cursor by seek(0).\nfrom fastapi import FastAPI, UploadFile, status def file_service(upload_file: UploadFile): content = upload_file.file.read() # first read another_file_service(upload_file) return status.HTTP_200_OK def another_file_service(upload_file: UploadFile): upload_file.file.seek(0) # need to reset cursor !!!! content = upload_file.file.read() # third read reference # https://stackoverflow.com/questions/3906137/why-cant-i-call-read-twice-on-an-open-file\n","date":"2024-06-14","externalUrl":null,"permalink":"/note/python-read-file-multiple-time/","section":"Note","summary":"Read file (\u003ccode\u003eBinaryIO\u003c/code\u003e) multiple time in Python. Solution to prevent empty content in the second read.","title":"Python: Read File(BinaryIO) Multiple Time","type":"note"},{"content":"","date":"2024-06-09","externalUrl":null,"permalink":"/tags/database/","section":"tags","summary":"","title":"Database","type":"tags"},{"content":" Context # While Django allows setting configurations like CONNECTION_MAX_AGE, using gunicorn (multi-process) to run multiple API instances or using HPA to scale API instances in k8s can still lead to DB connection overload issues!\nAbout PgBouncer # pgbouncer/pgbouncer lightweight connection pooler for PostgreSQL C 2745 430 PgBouncer serves as middleware for centralized DB connection pooling.\nIt enables backend service instances to reuse DB connections through PgBouncer.\nAs illustrated:\nThe Transactions per second on the right shows the number of transactions spiking during three load tests. The 2nd load test used Django\u0026rsquo;s native DB connection method. The 1st and 3rd load tests used pgbouncer for connecting WebService instances. The Server sessions on the left (representing the number of current DB connections) indicate: During the 2nd load test: DB connection overload occurred! During the 1st and 3rd load tests: DB connections stably remained around 20. Backend Service Configuration # Special settings needed:\ndocker-compose.yml .env docker-compose.yml Ensure db and pgbouncer are on the same network. Since it\u0026rsquo;s on Docker\u0026rsquo;s internal network, The postgres HOST for pgbouncer should be set to db. db: image: postgres:15.1 container_name: postgres restart: always environment: POSTGRES_USER: your_postgres_user POSTGRES_PASSWORD: your_postgres_password POSTGRES_DB: dev ports: - 5432:5432 volumes: - pg_data:/var/lib/postgresql/data networks: - django_network pgbouncer: image: bitnami/pgbouncer container_name: pgbouncer restart: always ports: - 6432:6432 # Connect to `pgbouncer` on port 6432 environment: POSTGRESQL_USERNAME: your_postgres_user POSTGRESQL_PASSWORD: your_postgres_password POSTGRESQL_HOST: db POSTGRESQL_PORT: 5432 POSTGRESQL_DATABASE: dev PGBOUNCER_DATABASE: dev networks: - django_network # Ensure `db` and `pgbouncer` are on the same network .env To connect to pgbouncer: Set DB_BOUNCER=True Set DB_PORT=6432 # if you want to use postgres you should set DB_ENGINE DB_ENGINE=django.db.backends.postgresql DB_HOST=127.0.0.1 # DB_PORT=5432 DB_NAME=postgres DB_USER=USER_NAME DB_PASSWORD=PASSWORD12345678 # if you want to use `pgbouncer` you should set DB_BOUNCER=True # and set DB_PORT to 6432 DB_BOUNCER=True DB_PORT=6432 Backend Service settings.py Modification # Details of changes:\nUsing pydantic\u0026rsquo;s BaseSettings for DB configuration. In settings.py, determining whether to connect to DB or pgbouncer based on DB_BOUNCER. config.py\nfrom pydantic import BaseSettings, Field class DATABASE_SETTINGS(BaseSettings): model_config = SettingsConfigDict(env_prefix=\u0026#39;DB_\u0026#39;) ENGINE: str = Field(default=\u0026#39;django.db.backends.sqlite3\u0026#39;) HOST: str = Field(default=\u0026#39;\u0026#39;) PORT: int = Field(default=\u0026#39;\u0026#39;) NAME: str = Field(default=\u0026#39;\u0026#39;) USER: str = Field(default=\u0026#39;\u0026#39;) PASSWORD: str = Field(default=\u0026#39;\u0026#39;) CONN_MAX_AGE: int = Field(default=1) CONN_HEALTH_CHECKS: bool = Field(default=True) BOUNCER: bool = Field(default=False) database_settings = DATABASE_SETTINGS() settings.py\nfrom config import database_settings DATABASES = { \u0026#39;default\u0026#39;: database_settings.model_dump(mode=\u0026#34;json\u0026#34;) } if database_settings.BOUNCER: DATABASES[\u0026#39;default\u0026#39;][\u0026#39;DISABLE_SERVER_SIDE_CURSORS\u0026#39;] = True Reference # https://saadmk11.github.io/blog/posts/django-postgresql-database-connection-pooling-with-pgbouncer/ https://stackoverflow.com/questions/76046768/configure-pgbouncer-and-postgresql-in-docker-compose https://hub.docker.com/r/bitnami/pgbouncer/ https://www.pgbouncer.org/config.html ","date":"2024-06-09","externalUrl":null,"permalink":"/database/pgbouncer/","section":"Database Landing Page","summary":"Solving Django backend DB connection overload with PgBouncer","title":"PgBouncer: Lightweight Postgres Connection Pool","type":"database"},{"content":" Introduction # Currently, I am a teaching assistant for Programming 1. The IPs of the computers in the lab are internal network IPs. The Online Judge VM for the course only allows school IPs (140.116.xxx.xxx) to connect, and does not allow internal network IPs. Originally, I used ngrok for NAT, but the free version of ngrok only allows 40 users per tunnel. With over 240 students, it is impractical to set up 6 tunnels and distribute them to the students. This is very cumbersome\u0026hellip; Additionally, every time ngrok restarts, it changes the domain. This requires students to reset their connection domains each time. Alternative to ngrok # Cloudflare Tunnel The free plan of Cloudflare Tunnel includes: DNS setup No connection limitations (the name server must be on Cloudflare) Other features similar to ngrok Cloudflare Tunnel Documentation # https://developers.cloudflare.com/pages/how-to/preview-with-cloudflare-tunnel/\nInstallation # You can find the appropriate version for your OS at Cloudflare Tunnel Downloads. For Mac OS:\nbrew install cloudflare/cloudflare/cloudflared For Linux:\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb sudo apt install ./cloudflared-linux-amd64.deb Normal Usage # For ngrok:\nngrok http 8888 For Cloudflare Tunnel:\ncloudflared tunnel --url http://localhost:8888 This generates a random URL to connect to localhost:8888. If you want to set your own domain, you need to configure the cloudflared config file. Advanced Usage # Before setting the domain, ensure that the domain\u0026rsquo;s Nameserver is set to Cloudflare. After setting it up, you can connect to the server\u0026rsquo;s localhost:\u0026lt;port\u0026gt; through your DNS.\nNext, use the command line to set up the cloudflared config file. Authentication cloudflared tunnel login Create a Tunnel cloudflared create \u0026lt;tunnel_name\u0026gt; cloudflared tunnel route dns \u0026lt;tunnel_name\u0026gt; \u0026lt;domain_name\u0026gt; This will generate a \u0026lt;tunnel_id\u0026gt;.json file in ~/.cloudflared/. You can see the \u0026lt;tunnel_id\u0026gt; under Access -\u0026gt; Tunnel in the Cloudflare dashboard. In DNS -\u0026gt; Records, you will see the added \u0026lt;domain_name\u0026gt;. The content part will be \u0026lt;tunnel_id\u0026gt;.cfargotunnel.com. Configuration # Cloudflare Tunnel: Setup Configuration File\nNext, add a config.yaml file in ~/.cloudflared/. tunnel: \u0026lt;tunnel-id\u0026gt; credentials-file: /path/to/\u0026lt;tunnel-id\u0026gt;.json # The previously generated JSON file in ~/.cloudflared/ ingress: - hostname: \u0026lt;domain-name\u0026gt; service: http://localhost:\u0026lt;port1\u0026gt; - service: http_status:404 When setting up config.yaml, you can configure multiple ingress entries. This allows different ports to correspond to different domains. For example:\nlocalhost:8888 corresponds to service1.domain.com localhost:9999 corresponds to service2.domain.com Start Tunnel # To start the tunnel:\ncloudflared tunnel run \u0026lt;tunnel_name\u0026gt; You can use tmux to keep the tunnel running in the background. Refer to tmux Common Commands! Using tmux:\ntmux new -s cloudflare-tunnel Then run cloudflared tunnel run \u0026lt;tunnel_name\u0026gt; inside tmux. Press ctrl + b, then d to detach from tmux. To reattach to tmux, use tmux attach -t cloudflare-tunnel. Command List # cloudflared tunnel login cloudflared create \u0026lt;tunnel_name\u0026gt; cloudflared tunnel route dns \u0026lt;tunnel_name\u0026gt; \u0026lt;domain_name\u0026gt; This generates a \u0026lt;tunnel_id\u0026gt;.json file in ~/.cloudflared/ and adds config.yaml here. You can see the \u0026lt;tunnel_id\u0026gt; under Access -\u0026gt; Tunnel in the Cloudflare dashboard.\ncloudflared tunnel run \u0026lt;tunnel_name\u0026gt; Reference # Cloudflare Tunnel: Overview Cloudflare Tunnel: Downloads Cloudflare Tunnel: Setup Configuration File Cloudflare Tunnel: Ingress ","date":"2024-05-28","externalUrl":null,"permalink":"/note/cloudflare-tunnel/","section":"Note","summary":"Setup Cloudflare Tunnel for NAT, an alternative to Ngrok","title":"Cloudflare Tunnel","type":"note"},{"content":" tmux/tmux tmux source code C 33647 2050 Introduction # Since the VM provided for the Programming 1 course requires a Cloudflare tunnel setup for connection (If interested, you can see my Cloudflare-tunnel setup process) I wanted to use tmux to keep the tunnel running in the background and to check the tunnel\u0026rsquo;s status at any time tmux Concepts # tmux can be divided into three levels Session Window Pane Session # Session is the highest level in tmux You can think of it as a workspace in tmux A session can have multiple windows (List all available sessions)\nWindow # Window is the second level in tmux You can think of it as different windows within a session A window can have multiple panes Pane # Pane is the third level in tmux You can think of it as different split screens within a window A pane can only have one shell Panes in the same window can be split horizontally or vertically (This is how it can be split)\nCommon tmux Commands # If you are in tmux, you can press Ctrl + b to enter tmux command mode (Just like pressing : in vim) Session # From the command line: tmux new -s \u0026lt;session-name\u0026gt; : Create a new session named \u0026lt;session-name\u0026gt; tmux ls : List all available sessions tmux attach -t \u0026lt;session-name\u0026gt; : Attach to a session named \u0026lt;session-name\u0026gt; In tmux: Ctrl + b + d : Detach from the tmux session This does not close the session; it just detaches The programs in the session will continue to run!!! Ctrl + b + s : List all available sessions Window # Ctrl + b + c : Create a new window Ctrl + b + n : Switch to the next window Ctrl + b + p : Switch to the previous window Ctrl + b + w : List all available windows Pane # Splitting panes:\nCtrl + b + % : Split the screen vertically (left/right split) Ctrl + b + \u0026quot; : Split the screen horizontally (top/bottom split) Ctrl + b + x : Close the current pane Resizing panes: You can first press Ctrl + b then : to enter tmux command mode Then type resize-pane (you can use Tab for auto-completion) Then add -U (up) -D (down) -L (left) -R (right) Followed by a number to adjust the size of the pane Switching between panes:\nCtrl + b + \u0026lt;arrow-key\u0026gt; : Switch to the specified pane Ctrl + b + q : Display a number on each pane Ctrl + b + q + \u0026lt;number\u0026gt; : Switch to the specified pane ","date":"2024-05-28","externalUrl":null,"permalink":"/note/tmux/","section":"Note","summary":"Common tmux commands Cheat Sheet","title":"Tmux Cheat Sheet","type":"note"},{"content":"","date":"2024-05-28","externalUrl":null,"permalink":"/tags/aws/","section":"tags","summary":"","title":"AWS","type":"tags"},{"content":"","date":"2024-05-28","externalUrl":null,"permalink":"/tags/fastapi/","section":"tags","summary":"","title":"FastAPI","type":"tags"},{"content":" Intro # Mock boto3 with moto in FastAPI framework. boto3 : AWS python SDK moto : Mock package for AWS python SDK server mode for Mocking AWS services mock_aws decorator for AWS mocked out FastAPI provide TestClient : ref for clean testing with pytest Application Example # In FastAPI , the common pattern is using Depends for dependcies-injection\nBy the way , Depends can be recursive Which means , A Depends can depends on B Depends and C Depends\nEg: endpoint.py\nfrom fastapi import Depends @FileV1Router.post( path=\u0026#34;/files\u0026#34;, response_model=v1_schemas.FilePresignedUrlResponse, ) async def create_file_endpoint( file: v1_schemas.FileCreate, file_service: FileService = Depends(get_file_service), user_id: str = Depends(get_current_user), ): file_response = file_service.generate_presigned_upload_url(file, user_id) return file_response deps.py\ndef get_file_service( # sqlalchemy `Session` instance db: Session = Depends(get_db), # `boto3.client(\u0026#39;s3\u0026#39;)` instance s3_client=Depends(get_s3_client), ): # inject dependencies to `FileService` class return FileService( db, s3_client, ) dependency_overrides with Database example # However, when it comes to testing . We might want to overrider get_db dependcies with our Testing Database such as sqlite in memeory.\nLuckly, FastAPI provide [FastAPI Testing Dependencies with Overrides](https://fastapi.tiangolo.com/advanced/testing-dependencies/) utilites for our use cases!\nContinue from previous application.\ndef override_get_db(): try: # sqlalchemy `sessionmaker` with mock DB db = TestingSessionLocal() yield db finally: db.close() # app : original FastAPI instance from main application app.dependency_overrides[get_db] = override_get_db testClient = TestClient(app) setup moto # moto : A library that allows you to easily mock out tests based on AWS infrastructure.\nMoto: Server Mode # Moto: Server Mode\nMoto also provide stand-alone server mode. ( for mocking AWS services ) I recommend using Docker to setup moto-server\ndocker run --rm -p 5000:5000 --name moto motoserver/moto:latest Or using Docker-compose If having other infra dependencies.\nversion: \u0026#39;3.7\u0026#39; services: moto: image: motoserver/moto:4.1.13 ports: - \u0026#34;5000:5000\u0026#34; environment: - MOTO_PORT=5000 docker compose up moto -d Dashboard Moto server provide a dashboard for monitoring current state of service.\nhttp://localhost:5000/moto-api/ Recommended Usage \u0026amp; Example(from official docs) # Recommended Usage\nEnsure dummy env setup in your test scope.\nos.environ[\u0026#34;AWS_ACCESS_KEY_ID\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SECRET_ACCESS_KEY\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SECURITY_TOKEN\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SESSION_TOKEN\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_DEFAULT_REGION\u0026#34;] = \u0026#34;us-east-1\u0026#34; os.environ[\u0026#34;MOTO_S3_CUSTOM_ENDPOINTS\u0026#34;] = \u0026#34;http://127.0.0.1:3000\u0026#34; Example useage with Pytest\n@pytest.fixture(scope=\u0026#34;function\u0026#34;) def aws_credentials(): \u0026#34;\u0026#34;\u0026#34;Mocked AWS Credentials for moto.\u0026#34;\u0026#34;\u0026#34; os.environ[\u0026#34;AWS_ACCESS_KEY_ID\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SECRET_ACCESS_KEY\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SECURITY_TOKEN\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SESSION_TOKEN\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_DEFAULT_REGION\u0026#34;] = \u0026#34;us-east-1\u0026#34; @pytest.fixture(scope=\u0026#34;function\u0026#34;) def aws(aws_credentials): with mock_aws(): yield boto3.client(\u0026#34;s3\u0026#34;, region_name=\u0026#34;us-east-1\u0026#34;) @pytest.fixture def create_bucket1(aws): boto3.client(\u0026#34;s3\u0026#34;).create_bucket(Bucket=\u0026#34;b1\u0026#34;) @pytest.fixture def create_bucket2(aws): boto3.client(\u0026#34;s3\u0026#34;).create_bucket(Bucket=\u0026#34;b2\u0026#34;) def test_s3_directly(aws): s3.create_bucket(Bucket=\u0026#34;somebucket\u0026#34;) result = s3.list_buckets() assert len(result[\u0026#34;Buckets\u0026#34;]) == 1 def test_bucket_creation(create_bucket1, create_bucket2): buckets = boto3.client(\u0026#34;s3\u0026#34;).list_buckets()[\u0026#34;Buckets\u0026#34;] assert len(result[\u0026#34;Buckets\u0026#34;]) == 2 override s3_client using dependency_overrides # With base usage of moto and dependency_overrides We could override get_s3_client dependency with moto mock client ~\ndef override_get_s3_client(): os.environ[\u0026#34;AWS_ACCESS_KEY_ID\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SECRET_ACCESS_KEY\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SECURITY_TOKEN\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_SESSION_TOKEN\u0026#34;] = \u0026#34;testing\u0026#34; os.environ[\u0026#34;AWS_DEFAULT_REGION\u0026#34;] = \u0026#34;us-east-1\u0026#34; os.environ[\u0026#34;MOTO_S3_CUSTOM_ENDPOINTS\u0026#34;] = \u0026#34;http://127.0.0.1:3000\u0026#34; try: with mock_aws(): conn = boto3.resource(\u0026#34;s3\u0026#34;) conn.create_bucket(Bucket=file_settings.USER_BUCKET_NAME) s3_client = boto3.client( \u0026#34;s3\u0026#34;, region_name=\u0026#34;us-east-1\u0026#34;, endpoint_url=\u0026#34;http://127.0.0.1:3000\u0026#34; ) yield s3_client finally: pass # app : original FastAPI instance from main application app.dependency_overrides[get_s3_client] = override_get_s3_client testClient = TestClient(app) BTW, don\u0026rsquo;t forget to add mock_aws for pytest function.\nfrom moto import mock_aws from test.client import testClient @mock_aws def test_create_file(test_user_setup_teardown): valid_user_data, response = test_user_setup_teardown response = testClient.post( \u0026#34;/files\u0026#34;, headers={ \u0026#34;Authorization\u0026#34;: \u0026#34;{token_type} {token}\u0026#34;.format( token_type=response.json()[\u0026#34;token_type\u0026#34;], token=response.json()[\u0026#34;access_token\u0026#34;], ) }, json={\u0026#34;filename\u0026#34;: \u0026#34;test-file\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;This is a test file\u0026#34;}, ) # ... ","date":"2024-05-28","externalUrl":null,"permalink":"/backend/k8s-fastapi-mock-boto3-s3-with-moto/","section":"Backend Landing Page","summary":"FastAPI Testing: Mock AWS S3 Boto3 With Moto","title":"FastAPI: Mock S3 with Moto","type":"backend"},{"content":"","date":"2024-05-28","externalUrl":null,"permalink":"/tags/testing/","section":"tags","summary":"","title":"Testing","type":"tags"},{"content":"","date":"2024-05-28","externalUrl":null,"permalink":"/tags/devops/","section":"tags","summary":"","title":"Devops","type":"tags"},{"content":" Kubernetes Cheat Sheet: Extract ConfigMap or Secret to .env file # Extract from ConfigMap # kubectl get configmap my-map --output json | jq \u0026#39;.data\u0026#39; | jq -r \u0026#39;to_entries | map(.key + \u0026#34;=\u0026#34; + (.value)) | .[]\u0026#39; \u0026gt;\u0026gt; .env Explanation:\nkubectl get configmap my-map --output json | # Extract the data section. jq \u0026#39;.data\u0026#39; | # Replace each \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34; pair with \u0026#34;key=value\u0026#34; jq -r \u0026#39;to_entries | map(.key + \u0026#34;=\u0026#34; + (.value)) | .[]\u0026#39; \u0026gt;\u0026gt; .env Extract from Secret # kubectl get secret my-secret --output json | jq \u0026#39;.data\u0026#39; | jq \u0026#39;map_values(@base64d)\u0026#39; | jq -r \u0026#39;to_entries | map(.key + \u0026#34;=\u0026#34; + (.value)) | .[]\u0026#39; \u0026gt;\u0026gt; .env Explanation:\nkubectl get secret my-secret --output json | # Extract the data section. jq \u0026#39;.data\u0026#39; | # Decode the value of each keys. jq \u0026#39;map_values(@base64d)\u0026#39; | # Replace each \u0026#34;key\u0026#34;: \u0026#34;value\u0026#34; pair with \u0026#34;key=value\u0026#34; jq -r \u0026#39;to_entries | map(.key + \u0026#34;=\u0026#34; + (.value)) | .[]\u0026#39; \u0026gt;\u0026gt; .env Extract from helm # # Extract the values with a `awk` script: we print everything starting from the line that contains only `configmap` until the first empty line. awk \u0026#39;{if ($0 ~ /^configmap:$/) {triggered=1;}if (triggered) {print; if ($0 ~ /^$/) { exit;}}}\u0026#39; \u0026#34;./project/values.yaml\u0026#34; | # Keep only the indented lines that contains our configuration values. grep \u0026#39;^ \u0026#39; | # Transform key: value into key=value sed \u0026#39;s/ //;s/: /=/\u0026#39; \u0026gt;\u0026gt; .env Refenece # https://www.jujens.eu/posts/en/2021/Mar/21/kubectl-cfg-to-env/ ","date":"2024-05-28","externalUrl":null,"permalink":"/devops/k8s-extract-configmap-or-secret-to-env-file/","section":"DevOps Landing Page","summary":"Kubernetes Cheat Sheet: Extract ConfigMap or Secret to .env file","title":"k8s: Extract Configmap or Secret to Env File","type":"devops"},{"content":"","date":"2024-05-28","externalUrl":null,"permalink":"/tags/kubernetes/","section":"tags","summary":"","title":"Kubernetes","type":"tags"},{"content":"","date":"2024-05-21","externalUrl":"/backend/","permalink":"/categories/backend/","section":"Categories Landing Page","summary":"Links to backend-related articles","title":"Backend","type":"categories"},{"content":"","date":"2024-05-21","externalUrl":"/note/","permalink":"/categories/note/","section":"Categories Landing Page","summary":"Links to my notes","title":"Notes","type":"categories"},{"content":"","date":"2024-05-21","externalUrl":"/devops/","permalink":"/categories/devops/","section":"Categories Landing Page","summary":"Links to devops-related articles","title":"Devops","type":"categories"},{"content":"","date":"2024-05-21","externalUrl":"/database/","permalink":"/categories/database/","section":"Categories Landing Page","summary":"Links to database-related articles","title":"Database","type":"categories"},{"content":"","date":"2024-05-21","externalUrl":null,"permalink":"/note/","section":"Note","summary":"","title":"Note","type":"note"},{"content":"Some articles about backend.\n","date":"2024-05-21","externalUrl":null,"permalink":"/backend/","section":"Backend Landing Page","summary":"Some articles about backend.","title":"Backend Landing Page","type":"backend"},{"content":"Some articles about backend.\n","date":"2024-05-21","externalUrl":null,"permalink":"/other/","section":"Backend Landing Page","summary":"Some articles about backend.","title":"Backend Landing Page","type":"other"},{"content":"Some articles about backend.\n","date":"2024-05-21","externalUrl":null,"permalink":"/sample/","section":"Backend Landing Page","summary":"Some articles about backend.","title":"Backend Landing Page","type":"sample"},{"content":"Some articles about Database.\n","date":"2024-05-21","externalUrl":null,"permalink":"/database/","section":"Database Landing Page","summary":"Some articles about Database.","title":"Database Landing Page","type":"database"},{"content":"Some articles about backend.\n","date":"2024-05-21","externalUrl":null,"permalink":"/devops/","section":"DevOps Landing Page","summary":"Some articles about backend.","title":"DevOps Landing Page","type":"devops"},{"content":" Recent Backend \u0026#8599; \u0026#8598; 2024-05-21 Links to backend-related articles Notes \u0026#8599; \u0026#8598; 2024-05-21 Links to my notes Devops \u0026#8599; \u0026#8598; 2024-05-21 Links to devops-related articles Database \u0026#8599; \u0026#8598; 2024-05-21 Links to database-related articles ","date":"2024-05-21","externalUrl":null,"permalink":"/categories/","section":"Categories Landing Page","summary":" Recent Backend \u0026#8599; \u0026#8598; 2024-05-21 Links to backend-related articles Notes \u0026#8599; \u0026#8598; 2024-05-21 Links to my notes Devops \u0026#8599; \u0026#8598; 2024-05-21 Links to devops-related articles Database \u0026#8599; \u0026#8598; 2024-05-21 Links to database-related articles ","title":"Categories Landing Page","type":"categories"},{"content":"","date":"2024-05-21","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024-05-21","externalUrl":null,"permalink":"/tags/new-article/","section":"tags","summary":"","title":"New-Article","type":"tags"},{"content":"","date":"2024-05-21","externalUrl":null,"permalink":"/other/test-article/","section":"Backend Landing Page","summary":"","title":"Other Test Article","type":"other"},{"content":"","date":"2024-05-21","externalUrl":null,"permalink":"/sample/test-article/","section":"Backend Landing Page","summary":"","title":"Test Article","type":"sample"},{"content":"","date":"2024-05-18","externalUrl":null,"permalink":"/","section":"Welcome to Blowfish! 🎉","summary":"","title":"Welcome to Blowfish! 🎉","type":"page"},{"content":" Record of My First Semester at NCKU Computer Science # Actually, I wrote this article during the summer break between my freshman and sophomore years. Mainly, I went through my calendar to organize what I did during my first semester.\nThe focus of my first semester wasn\u0026rsquo;t on academics. Instead, it was on freelancing, clubs, hands-on courses, and courses I was genuinely interested in.\n(Blurred Calendar)\nHowever, by the end of the semester, I realized I might have taken on too many external projects. It got a bit overwhelming, with multiple deadlines every week.\nThis might be because, towards the end of high school, I got tired of academics. I felt that the knowledge I was learning couldn\u0026rsquo;t be applied in future scenarios. It seemed meaningless to learn these things (?). Most of the time, I was memorizing things just for the grades. This is why I was less interested in academics.\nWhat Did I Do in My First Semester? # I will mainly categorize into the following directions:\nHomework/Freelancing Clubs Competitions Organizing HSPC Courses Homework/Freelancing # Because I didn\u0026rsquo;t want to spend effort studying subjects just for exam scores, I focused my time on homework and freelancing, trying to accumulate as much practical experience as possible.\nHomework # Actually, I started taking on college DSA-related homework assignments in my last year of high school. Mainly as practice and to earn some extra money.\nDuring the school term, I took on quite a few assignments, mostly in C++. Occasionally, there were special assignments:\nImplementing algorithms using Matlab. Writing in Scala, a functional programming language I had never heard of. Writing generic functions in C, a topic I found really difficult to grasp initially. Extremely challenging graph theory problems. Freelancing # I happened to see a post recruiting a web development intern on the NCKU second-hand forum. Since I had started learning front-end in my senior year of high school and had done some back-end CRUD during the summer before college, I thought I had a basic understanding of both front-end and back-end, so I applied.\n(Recruitment Post at the Time)\nThe client was also a senior at NCKU. The website was originally completed by an outsourcing company. Later, another senior helped modify and add features.\nThe entire tech stack of the website was:\nHosting: Hostinger (I hadn\u0026rsquo;t heard of it, but sometimes it had serious latency issues.) Frontend: jQuery raw HTML/CSS/JS Backend: PHP: Slim framework (I only knew about Laravel at the time, hadn\u0026rsquo;t heard of Slim) MySQL Structure: MVC Version Control: Git Self hosted Git server: Gitea CI/CD: null (?) The website didn\u0026rsquo;t have high traffic, but the overall architecture was quite complex (some code was difficult to read and modify). There were many features the client wanted to add or modify, mainly for an insurance-related website system.\nFeatures:\nFrontend: Insurance calculation Insurance recommendation Insurance information Article system Backend: Member system management Insurance CRUD Article CRUD Tasks I Handled:\nFixing small bugs: Some data needed to be sorted before being sent to the frontend Added ORDER BY... in the corresponding SQL query Fixed some frontend RWD issues Constant back-and-forth with the client to confirm the layout Adding a WYSIWYG editor to the backend article system: A WYSIWYG editor is a tool similar to Google Docs that allows editing paragraphs, sizes, colors, adding images, etc., directly on the web. The original article system only had a simple textarea, without a WYSIWYG editor. Later implemented using quill.js, an open-source JS library. Initially found a paid one, froala , mistakenly thought it had a free trial, later realized it was paid. Many frontend adjustments: Some RWD issues Some UI/UX adjustments Adding frontend features Encountering various JS pitfalls Since no modern frontend framework was used, the overall frontend architecture was quite messy, making it time-consuming to find the corresponding CSS. (Adding WYSIWYG editor to the backend article system)\nWeird Experiences:\nEyes + SMTP = The project\u0026rsquo;s CI/CD 🤯: After completing a feature, run it locally, then use ngrok to let the client test. Once approved, push the code to Gitea. How to deploy to Hostinger? Truly understanding the importance of good CI/CD: First back up the files that will be modified using SMTP (for easy rollback in case of issues). Then copy the updated files to Hostinger. This often led to discrepancies between the code on Hostinger and Gitea. Writing frontend logic in the backend: Although it was an MVC architecture, Sometimes a PHP file would return an entire HTML component without separating it into a view (took a long time to find where to modify a frontend component). Resistance to GitHub: Not sure why the senior and client initially resisted using GitHub. Instead, they set up their own git server. The senior\u0026rsquo;s home WAN didn\u0026rsquo;t have a fixed IP, so each time we had to connect to the git server via ngrok. This meant we had to be online simultaneously to push code (and add new remotes each time). Using GitHub would have avoided this issue and enabled some CI/CD processes. This was my first freelance project. I worked on it for about 3-4 months. It was also my first encounter with the importance of CI/CD.\nLessons Learned from This Project:\nQuickly getting up to speed with unfamiliar languages and frameworks Design patterns extended from frameworks: MVC, DAO Speed in understanding others\u0026rsquo; code Speed in getting up to speed with others\u0026rsquo; projects Initially struggled to understand the logic in some parts Later became familiar and could quickly find the corresponding code Understanding the importance of CI/CD Becoming more proficient with git Followed a git flow approach: creating branches for features, with master on Hostinger Clubs # Before the semester started, I joined the NCKU Electrical Engineering FB group and happened to see a promotional post for GDCS (Google Developer Student Club in NCKU). So I signed up.\nAt that time, I thought I needed to be a \u0026ldquo;core member\u0026rdquo; to attend classes. It turned out that \u0026ldquo;core members\u0026rdquo; were the ones teaching. The \u0026ldquo;general members\u0026rdquo; recruited at the beginning of the semester were the ones attending classes. By mistake, I became a core member in my freshman year 🥵.\nNCKU GDSC Groups for the Semester\nSo I ended up being a core member teaching Flutter. (Joined the Flutter group at the time)\nFlutter Tutorial 的 repository jason810496/FlutterToturial Dart Toturial for GDSC NCKU Dart 1 0 At the beginning of the semester, there wasn\u0026rsquo;t much pressure from courses. Feeling a bit idle, I joined additional groups:\nSolidity Study Group: Learning Solidity and Ethereum related knowledge. The group leader assigned readings, and everyone had to review all the readings and discuss them in the next study session. Cybersecurity and Cryptography Group: Initially focused on pure cryptography, Later shifted towards practical CTF (Capture the Flag). Only attended two classes before the end-of-semester rush. But with the bombardment of various deadlines towards the end of the semester, I realized I had joined too many groups, Couldn\u0026rsquo;t keep up with all of them. In the end, I only attended the Flutter group, Apologies to the leaders of the other groups 😥.\nCompetitions # NCPC # Probably because I entered through the APCS track, I happened to have the same advisor (Professor Qi Ye, who is super nice!) as two competitive programming seniors, @ColtenOuO and @erichung1113.\nDuring our chats, we discussed ICPC and NCPC.\nI originally didn\u0026rsquo;t plan to participate in competitions in college, but after talking about it, I ended up signing up.\nFinally, I teamed up with @erichung1113 and another super-fast typist senior, @jerrykal.\n(We received an Honorable Mention in NCPC, just a few ranks short of qualifying for ICPC.)\nEOF CTF # One day, @ColtenOuO suddenly asked if I wanted to join EOF CTF, saying that senior @bacon-cy had asked him to join.\nHe asked if I wanted to play together, and we ended up needing one more teammate.\n(At that time, I was in the GDSC Cryptography and Cybersecurity group) I happened to know a very strong senior @三腳蛇.\nSo I invited him to join us in the competition.\nOn the first day of the competition, I happened to be riding to Chiayi and Alishan.\nLater, I couldn\u0026rsquo;t solve any of the problems.\n(I only knew web security, but the web challenges that time were tough, and I hadn\u0026rsquo;t touched CTF in a while.)\nSo, basically, I made no contributions and had to apologize to my teammates 😢.\nHITCON CTF # Previously, when chatting, senior @Vincent550102 in his sophomore year added me to the NCKU CTF Discord.\nThey occasionally gathered teams to participate in CTFs.\nThe annual HITCON CTF was a must for the seniors.\nI checked out the first web challenge,\n(mainly about bypassing the frontend js, where the content sent to the backend had to meet length restrictions and some byte operations)\nI looked at it for a long time and tried many methods but couldn\u0026rsquo;t figure out the key code.\n(I can only say I wasn\u0026rsquo;t familiar enough with some of the native methods in js＠＠)\nLater, other seniors in the group solved it!!!\nAnd more seniors solved several other challenges.\nIn the end, NCKU CTF ranked 37th globally (2nd in Taiwan; out of 95 countries, 1243 teams).\nAgain, I made no contributions 🥲.\nThe seniors are incredibly strong Orz.\nI only know web security, but when faced with difficult web challenges, I couldn\u0026rsquo;t solve them. I really lack a lot of experience.\n(End Ranking)\nCourses # Practical Courses # Programming I Teaching C syntax, with some tricky homework problems.\nThe exams are over 100 points, which can be tough for beginners.\nBut the professor is quite nice, giving a square root times 10 boost for scores below 60.\n程式設計（一）的 repository jason810496/CKJudge Programming Design 1 Exercises C 0 0 Since I had prior experience with C, the homework was manageable.\nEnded up passing with 100 points.\nWindows Programming C#, OOP WinForm Unity Final Project Early Course The early part of the course focused on teaching C# WinForm.\nIt also covered very basic OOP, but didn\u0026rsquo;t touch on some key OOP concepts.\n(Only covered constructor and inheritance, but not interface or polymorphism.)\nThe TA set tight deadlines but graded very slowly\u0026hellip;\nThere were bonus points for completing tasks in class, but it was almost impossible to finish before the end of class.\nFor Mac M1 users, you had to set up a Windows VM to complete WinForm assignments.\nThe midterm exam was an on-site exam, similar to the WinForm assignments.\n視窗程式設計的 repository jason810496/Window-Programming C# 2 0 Mid-Course\nStarted teaching Unity, with the TA instructing on Unity 3D for game development.\nIf you didn\u0026rsquo;t follow the TA closely, it was hard to understand the operations.\nAfter about 3 weeks of instruction, we had to create a game with quite a few features.\nLegend of Viking jason810496/Legend-of-Viking My Unity Game deploy on Github page HTML 0 0 （ Big project of Unity 3D ）\nGithub Page Demo\nLate Course\nFinally, we had to complete a final project.\nThe topic was open, could be: WinForm tools, Unity multiplayer games, or anything written in C#.\n(Maybe even Asp.Net XD)\nMy final small project was creating Live Share IDE,\nan IDE that supports real-time information sharing.\nTech stack:\nWinForm Native Python socket Just used these to build it ouo.\n(At that time, I didn\u0026rsquo;t know why I liked doing things from scratch and didn\u0026rsquo;t like using existing packages.) Result:\nLive Share IDE 的 repository jason810496/Live-Share-IDE A Live-Share IDE written in C#. With directory tree , syntax high-lighting , chat room \u0026hellip; etc C# 2 0 (Looks similar to VSCode interface but natively supports a chatroom)\nAfter deciding on the topic, I didn\u0026rsquo;t start working on it until a day and a half before the demo.\nThis course mainly trained my ability to \u0026ldquo;meet deadlines.\u0026rdquo;\nTheoretical Courses # General Physics\nCalculus\nIntroduction to Digital Circuits\nConclusion # By maintaining the minimum effort required for theoretical courses, I managed to pass all subjects!\nBut the grades weren\u0026rsquo;t very impressive.\nFor courses related to programming,\nbecause of my previous experience with assignments in high school, I didn\u0026rsquo;t find the more complex assignments intimidating.\nNo need for special review.\nI gained a lot from freelancing and using the HSPC system.\nI understood why we need technologies like framework, CI/CD, and DevOps.\nHowever, I need to adjust my overall time allocation.\nParticipating in too many activities at once eventually made everything overwhelming.\n","date":"2023-06-23","externalUrl":null,"permalink":"/note/csie-freshman-first-semester/","section":"Note","summary":"What did I do in the first semester of freshman year?","title":"NCKU CSIE Freshman First Semester","type":"note"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/topics/","section":"Topics","summary":"","title":"Topics","type":"topics"}]